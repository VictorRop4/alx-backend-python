apiVersion: apps/v1                    # Use the stable API group/version for Deployments.
kind: Deployment                       # This resource declares a Deployment (manages stateless Pods via a ReplicaSet).
metadata:
  name: django-messaging-app           # Human-readable name for the Deployment.
  labels:
    app: django-messaging-app          # Labels attached to the Deployment object itself (useful for selection/ops).
spec:
  replicas: 2                          # Desired number of identical Pods (for availability and load-sharing).
  selector:
    matchLabels:
      app: django-messaging-app        # Pods with this label will be managed by this Deployment/ReplicaSet.
  template:                            # Pod template: the blueprint for each created Pod.
    metadata:
      labels:
        app: django-messaging-app      # Labels applied to each Pod instance (must match the selector above).
    spec:
      containers:
        - name: django-messaging-app   # Container name within the Pod.
          image: <your-dockerhub-username>/django-messaging-app:latest  # OCI image to run (replace with your image/tag).
          ports:
            - containerPort: 8000      # Port exposed *inside* the Pod (Django’s default runserver/gunicorn port).
          env:
            - name: DJANGO_SETTINGS_MODULE
              value: messaging_app.settings   # Process env var passed to the containerized app.
---
apiVersion: v1                         # Core API group/version for Services.
kind: Service                          # This resource declares a Service (stable virtual IP + load balancing).
metadata:
  name: django-messaging-service       # Human-readable name for the Service.
spec:
  type: NodePort                       # Exposes the Service on each node’s IP at a static port.
  selector:
    app: django-messaging-app          # Endpoints: all Pods whose labels match this selector.
  ports:
    - protocol: TCP                    # Transport protocol for the Service.
      port: 8000                       # Cluster-internal Service port (clients inside cluster use this).
      targetPort: 8000                 # Container port the Service forwards traffic to.
      nodePort: 30080                  # Node-level port (30000–32767) reachable from your host (e.g., via Minikube IP).

